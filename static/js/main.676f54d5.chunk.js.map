{"version":3,"sources":["reducers/weather.js","reducers/index.js","actions/types.js","store.js","utils/api.js","services/Application/ApplicationProvider.js","services/Application/contants.js","services/Application/useApplication.js","components/WeatherCard.js","components/Swiper/Swiper.js","components/Chart/BarChart.js","components/Controls.js","components/OtherDays.js","components/LoadingCover.js","pages/Dashboard.js","actions/weather.js","App.js","serviceWorker.js","index.js"],"names":["initialState","weather","loading","error","combineReducers","state","action","type","payload","middleware","thunk","store","createStore","rootReducer","applyMiddleware","api","axios","create","headers","ApplicationContext","createContext","ApplicationProvider","children","unit","index","useReducer","Error","dispatch","value","application","setUnit","setIndex","Provider","useApplication","useContext","useStyles","makeStyles","root","marginTop","textAlign","title","fontSize","margin","smallTitle","description","fontWeight","smallDescription","dayOfWeek","smallDayOfWeek","WeatherCard","small","date","avgTempKelvin","avgTempFahrenheit","avgTempCelsius","otherProps","classes","unitMap","Paper","className","elevation","CardContent","Typography","gutterBottom","data-testid","dayjs","format","component","color","capitalize","defaultProps","SwiperCore","use","Navigation","Swiper","watchOverflow","navigation","spaceBetween","slidesPerView","onSlideChange","e","activeIndex","React","Children","map","child","BarChart","daysData","tempListKelvin","tempListFahrenheit","tempListCelsius","options","theme","mode","xaxis","categories","text","labels","style","yaxis","decimalsInFloat","colors","plotOptions","bar","columnWidth","endingShape","dataLabels","enabled","grid","lines","show","series","name","data","PropTypes","arrayOf","shape","number","isRequired","Controls","useState","setValue","FormControl","RadioGroup","row","aria-label","onChange","target","FormControlLabel","control","Radio","label","OtherDays","yesterdayIndex","tomorrowIndex","Grid","container","spacing","item","xs","length","height","display","justifyContent","alignItems","marginLeft","LoadingCover","CircularProgress","marginBottom","controls","pos","connect","getWeatherData","a","get","res","city","list","days","chunk","day","unix","dt","parseFloat","main","temp","toFixed","reduce","acc","console","log","msg","response","statusText","status","useEffect","Container","maxWidth","key","darkTheme","createMuiTheme","palette","App","ThemeProvider","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","message"],"mappings":"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","file":"static/js/main.676f54d5.chunk.js","sourcesContent":["import {\n  GET_WEATHER_DATA,\n  CLEAR_WEATHER_DATA,\n  WEATHER_DATA_ERROR,\n} from \"../actions/types\";\n\nconst initialState = {\n  weather: null,\n  loading: true,\n  error: {},\n};\n\nexport default function (state = initialState, action) {\n  const { type, payload } = action;\n\n  switch (type) {\n    case GET_WEATHER_DATA:\n      return {\n        ...state,\n        weather: payload,\n        loading: false,\n      };\n    case CLEAR_WEATHER_DATA:\n      return {\n        ...state,\n        weather: null,\n      };\n    case WEATHER_DATA_ERROR:\n      return {\n        ...state,\n        error: payload,\n        loading: false,\n        weather: null,\n      };\n    default:\n      return state;\n  }\n}\n","import { combineReducers } from \"redux\";\nimport weather from \"./weather\";\n\nexport default combineReducers({\n  weather,\n});\n","export const GET_WEATHER_DATA = \"GET_WEATHER_DATA\";\nexport const CLEAR_WEATHER_DATA = \"CLEAR_WEATHER_DATA\";\nexport const WEATHER_DATA_ERROR = \"WEATHER_DATA_ERROR\";\n","import { createStore, applyMiddleware } from \"redux\";\nimport thunk from \"redux-thunk\";\nimport rootReducer from \"./reducers\";\n\nconst initialState = {};\n\nconst middleware = [thunk];\n\nconst store = createStore(\n  rootReducer,\n  initialState,\n  applyMiddleware(...middleware)\n);\n\nexport default store;\n","import axios from \"axios\";\n\nconst api = axios.create({\n  headers: {\n    \"Content-Type\": \"application/json\",\n  },\n});\n\nexport default api;\n","import React, { createContext, useReducer } from \"react\";\nimport PropTypes from \"prop-types\";\nimport * as constants from \"./contants\";\n\n// Actions\nconst SET_UNIT = \"SET_UNIT\";\nconst SET_INDEX = \"SET_INDEX\";\n\nexport const ApplicationContext = createContext(null);\n\nconst ApplicationProvider = ({ children }) => {\n  const initialState = {\n    unit: constants.FAHRENHEIT,\n    index: 0,\n  };\n\n  function reducer(state, action) {\n    switch (action.type) {\n      case SET_UNIT: {\n        return { ...state, unit: action.payload };\n      }\n      case SET_INDEX: {\n        return { ...state, index: action.payload };\n      }\n      default:\n        throw new Error();\n    }\n  }\n\n  const [state, dispatch] = useReducer(reducer, initialState);\n\n  const value = {\n    application: state,\n    setUnit: (unit) => dispatch({ type: SET_UNIT, payload: unit }),\n    setIndex: (index) => dispatch({ type: SET_INDEX, payload: index }),\n  };\n\n  return (\n    <ApplicationContext.Provider value={value}>\n      {children}\n    </ApplicationContext.Provider>\n  );\n};\n\nApplicationProvider.propTypes = {\n  children: PropTypes.node.isRequired,\n};\n\nexport default ApplicationProvider;\n","export const FAHRENHEIT = \"fahrenheit\";\nexport const KELVIN = \"kelvin\";\nexport const CELSIUS = \"celsius\";\n","import { useContext } from \"react\";\nimport { ApplicationContext } from \"./ApplicationProvider\";\n\nconst useApplication = () => useContext(ApplicationContext);\n\nexport default useApplication;\n","import React from \"react\";\nimport PropTypes from \"prop-types\";\nimport capitalize from \"lodash/capitalize\";\nimport dayjs from \"dayjs\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport CardContent from \"@material-ui/core/CardContent\";\nimport Typography from \"@material-ui/core/Typography\";\nimport { Paper } from \"@material-ui/core\";\nimport {\n  useApplication,\n  KELVIN,\n  CELSIUS,\n  FAHRENHEIT,\n} from \"../services/Application\";\n\nconst useStyles = makeStyles({\n  root: {\n    marginTop: 16,\n    textAlign: \"center\",\n  },\n  title: {\n    fontSize: 24,\n    margin: 0,\n  },\n  smallTitle: {\n    fontSize: 16,\n  },\n  description: {\n    fontSize: 16,\n    fontWeight: \"bold\",\n  },\n  smallDescription: {\n    fontSize: 12,\n  },\n  dayOfWeek: {\n    fontSize: 16,\n  },\n  smallDayOfWeek: {\n    fontSize: 12,\n  },\n});\n\nconst WeatherCard = ({\n  small,\n  date,\n  avgTempKelvin,\n  avgTempFahrenheit,\n  avgTempCelsius,\n  ...otherProps\n}) => {\n  const classes = useStyles();\n  const { application } = useApplication();\n\n  const unitMap = {\n    [KELVIN]: avgTempKelvin,\n    [FAHRENHEIT]: avgTempFahrenheit,\n    [CELSIUS]: avgTempCelsius,\n  };\n\n  return (\n    <Paper className={classes.root} elevation={3} {...otherProps}>\n      <CardContent>\n        <Typography\n          className={small ? classes.smallTitle : classes.title}\n          gutterBottom\n          data-testid=\"date\"\n        >\n          {dayjs(date).format(\"MMM DD, YYYY\")}\n        </Typography>\n        <Typography\n          className={small ? classes.smallDayOfWeek : classes.dayOfWeek}\n          gutterBottom\n          data-testid=\"day\"\n        >\n          {dayjs(date).format(\"dddd\")}\n        </Typography>\n        <Typography\n          component=\"p\"\n          color=\"secondary\"\n          className={small ? classes.smallDescription : classes.description}\n          data-testid=\"unit\"\n        >\n          {unitMap[application.unit]} {capitalize(application.unit)}\n        </Typography>\n      </CardContent>\n    </Paper>\n  );\n};\n\nWeatherCard.propTypes = {\n  date: PropTypes.string.isRequired,\n  avgTempKelvin: PropTypes.number.isRequired,\n  avgTempFahrenheit: PropTypes.number.isRequired,\n  avgTempCelsius: PropTypes.number.isRequired,\n  small: PropTypes.bool,\n};\n\nWeatherCard.defaultProps = {\n  small: false,\n};\n\nexport default WeatherCard;\n","import React from \"react\";\nimport PropTypes from \"prop-types\";\nimport SwiperCore, { Navigation } from \"swiper\";\nimport { Swiper as SwiperOriginal, SwiperSlide } from \"swiper/react\";\nimport \"../../../node_modules/swiper/swiper.scss\";\nimport \"../../../node_modules/swiper/components/navigation/navigation.scss\";\n\nimport \"./Swiper.module.scss\";\nimport { useApplication } from \"../../services/Application\";\n\n// Install Swiper components\nSwiperCore.use([Navigation]);\n\nconst Swiper = ({ children }) => {\n  const { setIndex } = useApplication();\n  return (\n    <SwiperOriginal\n      watchOverflow\n      navigation\n      spaceBetween={5}\n      slidesPerView={1}\n      onSlideChange={(e) => setIndex(e.activeIndex)}\n    >\n      {React.Children.map(children, (child) => (\n        <SwiperSlide>{child}</SwiperSlide>\n      ))}\n    </SwiperOriginal>\n  );\n};\n\nSwiper.propTypes = {\n  children: PropTypes.node.isRequired,\n};\n\nexport default Swiper;\n","import React from \"react\";\nimport PropTypes from \"prop-types\";\nimport Chart from \"react-apexcharts\";\nimport capitalize from \"lodash/capitalize\";\nimport {\n  useApplication,\n  KELVIN,\n  FAHRENHEIT,\n  CELSIUS,\n} from \"../../services/Application\";\n\nconst BarChart = ({ daysData }) => {\n  const { application } = useApplication();\n  const unitMap = {\n    [KELVIN]: daysData[application.index].tempListKelvin,\n    [FAHRENHEIT]: daysData[application.index].tempListFahrenheit,\n    [CELSIUS]: daysData[application.index].tempListCelsius,\n  };\n\n  const state = {\n    options: {\n      theme: {\n        mode: \"dark\",\n      },\n      xaxis: {\n        categories: [\n          \"00-03\",\n          \"03-06\",\n          \"06-09\",\n          \"09-12\",\n          \"12-15\",\n          \"15-18\",\n          \"18-21\",\n          \"21-24\",\n        ],\n        title: {\n          text: `Daily 3 Hour Segments`,\n        },\n        labels: {\n          style: {\n            fontSize: \"10px\",\n          },\n        },\n      },\n      yaxis: {\n        title: {\n          text: capitalize(application.unit),\n        },\n        decimalsInFloat: 0,\n      },\n      colors: [\"#1976d2\"],\n      plotOptions: {\n        bar: {\n          columnWidth: \"25%\",\n          endingShape: \"rounded\",\n        },\n      },\n      dataLabels: {\n        enabled: false,\n      },\n      grid: {\n        yaxis: {\n          lines: {\n            show: false,\n          },\n        },\n      },\n    },\n    series: [\n      {\n        name: capitalize(application.unit),\n        data: unitMap[application.unit],\n      },\n    ],\n  };\n  return <Chart options={state.options} series={state.series} type=\"bar\" />;\n};\n\nBarChart.defaultProps = {\n  daysData: PropTypes.arrayOf(\n    PropTypes.shape({\n      tempListKelvin: PropTypes.arrayOf(PropTypes.number),\n      tempListFahrenheit: PropTypes.arrayOf(PropTypes.number),\n      tempListCelsius: PropTypes.arrayOf(PropTypes.number),\n    })\n  ).isRequired,\n};\n\nexport default BarChart;\n","import React, { useState } from \"react\";\n\nimport {\n  FormControl,\n  RadioGroup,\n  FormControlLabel,\n  Radio,\n} from \"@material-ui/core\";\nimport {\n  useApplication,\n  FAHRENHEIT,\n  CELSIUS,\n  KELVIN,\n} from \"../services/Application\";\n\nconst Controls = () => {\n  const { application, setUnit } = useApplication();\n  const [value, setValue] = useState(application.unit);\n  const handleChange = (e) => {\n    setValue(e.target.value);\n    setUnit(e.target.value);\n  };\n\n  return (\n    <FormControl component=\"fieldset\">\n      <RadioGroup\n        row\n        aria-label=\"temperature\"\n        name=\"temperature\"\n        value={value}\n        onChange={handleChange}\n        data-testid=\"radioGroup\"\n      >\n        <FormControlLabel\n          value={FAHRENHEIT}\n          control={<Radio />}\n          label=\"Fahrenheit\"\n          data-testid=\"fahrenheit\"\n        />\n        <FormControlLabel\n          value={CELSIUS}\n          control={<Radio />}\n          label=\"Celsius\"\n          data-testid=\"celsius\"\n        />\n        <FormControlLabel\n          value={KELVIN}\n          control={<Radio />}\n          label=\"Kelvin\"\n          data-testid=\"kelvin\"\n        />\n      </RadioGroup>\n    </FormControl>\n  );\n};\n\nexport default Controls;\n","import React from \"react\";\nimport PropTypes from \"prop-types\";\nimport WeatherCard from \"./WeatherCard\";\nimport { useApplication } from \"../services/Application\";\nimport { Grid } from \"@material-ui/core\";\n\nconst OtherDays = ({ daysData }) => {\n  const { application } = useApplication();\n  const yesterdayIndex = application.index - 1;\n  const tomorrowIndex = application.index + 1;\n\n  return (\n    <Grid container spacing={1}>\n      <Grid item xs={6}>\n        {yesterdayIndex >= 0 && (\n          <WeatherCard\n            small\n            date={daysData[yesterdayIndex].date}\n            avgTempKelvin={daysData[yesterdayIndex].avgTempKelvin}\n            avgTempFahrenheit={daysData[yesterdayIndex].avgTempFahrenheit}\n            avgTempCelsius={daysData[yesterdayIndex].avgTempCelsius}\n            data-testid=\"yesterday\"\n          />\n        )}\n      </Grid>\n      <Grid item xs={6}>\n        {tomorrowIndex < daysData.length && (\n          <WeatherCard\n            small\n            date={daysData[tomorrowIndex].date}\n            avgTempKelvin={daysData[tomorrowIndex].avgTempKelvin}\n            avgTempFahrenheit={daysData[tomorrowIndex].avgTempFahrenheit}\n            avgTempCelsius={daysData[tomorrowIndex].avgTempCelsius}\n            data-testid=\"tomorrow\"\n          />\n        )}\n      </Grid>\n    </Grid>\n  );\n};\n\nOtherDays.propTypes = {\n  daysData: PropTypes.arrayOf(\n    PropTypes.shape({\n      date: PropTypes.string.isRequired,\n      avgTempKelvin: PropTypes.number.isRequired,\n      avgTempFahrenheit: PropTypes.number.isRequired,\n      avgTempCelsius: PropTypes.number.isRequired,\n    })\n  ).isRequired,\n};\n\nexport default OtherDays;\n","import React from \"react\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport { Typography, CircularProgress } from \"@material-ui/core\";\n\nconst useStyles = makeStyles({\n  root: {\n    height: \"100vh\",\n    display: \"flex\",\n    justifyContent: \"center\",\n    alignItems: \"center\",\n  },\n  text: {\n    textAlign: \"center\",\n    fontSize: 24,\n    fontWeight: \"bold\",\n    marginLeft: 16,\n  },\n});\n\nconst LoadingCover = () => {\n  const classes = useStyles();\n  return (\n    <Typography component=\"div\" className={classes.root}>\n      <CircularProgress color=\"secondary\" />\n      <Typography\n        data-testid=\"loadingText\"\n        component=\"div\"\n        className={classes.text}\n      >\n        Loading...\n      </Typography>\n    </Typography>\n  );\n};\n\nexport default LoadingCover;\n","import React, { useEffect } from \"react\";\nimport { connect } from \"react-redux\";\nimport { getWeatherData } from \"../actions/weather\";\nimport WeatherCard from \"../components/WeatherCard\";\nimport { Container, Typography } from \"@material-ui/core\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport Swiper from \"../components/Swiper/Swiper\";\nimport BarChart from \"../components/Chart/BarChart\";\nimport Controls from \"../components/Controls\";\nimport OtherDays from \"../components/OtherDays\";\nimport LoadingCover from \"../components/LoadingCover\";\n\nconst useStyles = makeStyles({\n  title: {\n    fontSize: 30,\n    textAlign: \"center\",\n    fontWeight: \"bold\",\n    marginBottom: 16,\n    marginTop: 16,\n  },\n  controls: {\n    marginTop: 16,\n    textAlign: \"center\",\n  },\n  pos: {\n    marginTop: 16,\n  },\n});\n\nconst Dashboard = ({ getWeatherData, weather: { weather, loading } }) => {\n  const classes = useStyles();\n  useEffect(() => {\n    getWeatherData();\n  }, [getWeatherData]);\n\n  if (loading) {\n    return <LoadingCover />;\n  }\n\n  return (\n    <Container maxWidth=\"sm\">\n      <Typography component=\"div\" className={classes.title}>\n        {weather.city.name}\n      </Typography>\n\n      <Typography component=\"div\" className={classes.controls}>\n        <Controls />\n      </Typography>\n\n      <Typography component=\"div\" className={classes.pos}>\n        <Swiper>\n          {weather.daysData.map(\n            ({ date, avgTempKelvin, avgTempFahrenheit, avgTempCelsius }) => {\n              return (\n                <WeatherCard\n                  key={date}\n                  date={date}\n                  avgTempKelvin={avgTempKelvin}\n                  avgTempFahrenheit={avgTempFahrenheit}\n                  avgTempCelsius={avgTempCelsius}\n                />\n              );\n            }\n          )}\n        </Swiper>\n        <OtherDays daysData={weather.daysData} />\n      </Typography>\n\n      <Typography component=\"div\" className={classes.pos}>\n        <BarChart daysData={weather.daysData} />\n      </Typography>\n    </Container>\n  );\n};\n\nconst mapStateToProps = (state) => ({\n  weather: state.weather,\n});\n\nexport default connect(mapStateToProps, { getWeatherData })(Dashboard);\n","import api from \"../utils/api\";\r\nimport chunk from \"lodash/chunk\";\r\nimport dayjs from \"dayjs\";\r\n\r\nimport {\r\n  GET_WEATHER_DATA,\r\n  CLEAR_WEATHER_DATA,\r\n  WEATHER_DATA_ERROR,\r\n} from \"./types\";\r\n\r\nexport const getWeatherData = () => async (dispatch) => {\r\n  dispatch({ type: CLEAR_WEATHER_DATA });\r\n\r\n  try {\r\n    const res = await api.get(\r\n      \"https://api.openweathermap.org/data/2.5/forecast?q=Munich,de&APPID=75f972b80e26f14fe6c920aa6a85ad57&cnt=40\"\r\n    );\r\n\r\n    const { city, list } = res.data;\r\n    const days = chunk(list, 8);\r\n    const daysData = days.map((day) => {\r\n      const date = dayjs.unix(day[0].dt).format(\"YYYY-MM-DD\");\r\n      const tempListKelvin = day.map((data) => parseFloat(data.main.temp));\r\n      const tempListFahrenheit = tempListKelvin.map((data) =>\r\n        parseFloat(((data - 273.15) * (9 / 5) + 32).toFixed(2))\r\n      );\r\n      const tempListCelsius = tempListFahrenheit.map((data) =>\r\n        parseFloat(((5 / 9) * (data - 32)).toFixed(2))\r\n      );\r\n      const avgTempKelvin = parseFloat(\r\n        day\r\n          .reduce((acc, data) => {\r\n            return (acc + data.main.temp) / 2;\r\n          }, 0)\r\n          .toFixed(2)\r\n      );\r\n\r\n      const avgTempFahrenheit = parseFloat(\r\n        ((avgTempKelvin - 273.15) * (9 / 5) + 32).toFixed(2)\r\n      );\r\n      const avgTempCelsius = parseFloat(\r\n        ((5 / 9) * (avgTempFahrenheit - 32)).toFixed(2)\r\n      );\r\n      return {\r\n        date,\r\n        avgTempKelvin,\r\n        avgTempFahrenheit,\r\n        avgTempCelsius,\r\n        tempListKelvin,\r\n        tempListFahrenheit,\r\n        tempListCelsius,\r\n      };\r\n    });\r\n\r\n    dispatch({\r\n      type: GET_WEATHER_DATA,\r\n      payload: {\r\n        city,\r\n        daysData,\r\n      },\r\n    });\r\n  } catch (err) {\r\n    console.log(\"err: \", err);\r\n    dispatch({\r\n      type: WEATHER_DATA_ERROR,\r\n      payload: { msg: err.response.statusText, status: err.response.status },\r\n    });\r\n  }\r\n};\r\n","import React from \"react\";\n\n// Redux\nimport { Provider } from \"react-redux\";\nimport store from \"./store\";\n\nimport \"./App.scss\";\nimport Dashboard from \"./pages/Dashboard\";\nimport { ApplicationProvider } from \"./services/Application\";\nimport { createMuiTheme, ThemeProvider } from \"@material-ui/core\";\n\nconst darkTheme = createMuiTheme({\n  palette: {\n    type: \"dark\",\n  },\n});\n\nconst App = () => (\n  <Provider store={store}>\n    <ApplicationProvider>\n      <ThemeProvider theme={darkTheme}>\n        <Dashboard />\n      </ThemeProvider>\n    </ApplicationProvider>\n  </Provider>\n);\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}